<?xml version="1.0" encoding="utf-8" ?>
<!-- dtd 文件为XML文件的语法检查器，能限制该XML文件中有哪些标签，没有这个，
下边写标签的时候不会提示， !DOCTYPE 后面跟的就是这个XML文件的根标签 -->

<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <settings>
        <!-- 打开mybatis的日志，log4j的级别为debug时能显示SQL(可单独指定mapper包下的使用debug，其它的为info或者error级别)-->
        <setting name="logImpl" value="LOG4J"/>
    </settings>
    <typeAliases>
        <!-- 别名。当mapper文件中频繁用到某个类或者包时就可以使用别名来简化
             typeAlias是给某个具体类进行别名，此处定义了，后面mapper中就能使用；
             package，是声明包，意思是在mapper中写类型时可以不用写包名了；
             mybatis系统内置了一些别名，如map，全部小写。
        -->
        <!--<typeAlias type="User" alias="user"></typeAlias>-->
        <package name="me.shy.demo.domain"/>
    </typeAliases>
    <!-- 选择使用的环境配置-->
    <environments default="mysql">
        <environment id="demo">
            <!--配置事务管理器，此处为JDBC原生的事务处理。
            type属性取值有2个，一个是JDBC，另一个是MANAGED，表示把事务管理转交给其它容器，如spring-->
            <transactionManager type="JDBC"></transactionManager>
            <!-- 数据源，type有3个值：POOLED，表示使用连接池；UNPOOLED表示不使用连接池；JNDI表示使用容器（如tomcat或spring）的连接池-->
            <dataSource type="UNPOOLED">
                <!-- sqllite3 -->
                <property name="driver" value="org.sqlite.JDBC"/>
                <property name="url" value="jdbc:sqlite:D:/demos.workspace/demo.db"/>
            </dataSource>
        </environment>
        <environment id="mysql">
            <transactionManager type="JDBC"></transactionManager>
            <!-- mysql -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://demos01.shy.com:3306/demo"/>
                <property name="username" value="shy"/>
                <property name="password" value="123456"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <!-- 此处为mapper文件的位置，注意maven编译不会将xml文件打包，需要配置，详见pom.xml -->
        <mapper resource="me/shy/demos/mapper/UserMapper.xml"></mapper>

        <!-- mybatis的mapper与接口绑定实现

             实现mapper.xml与接口绑定，这样就可以直接调用接口的方法来调用mapper.xml中的SQL。实现步骤：
             1.此处mapper扫描不在使用mapper标签，而是使用package标签，name属性为mapper.xml文件的包名；
             2.定义好mapper.xml文件，比如me.shy.demo.mapper.UserMapper.xml;
             3.在mapper.xml文件相同包下创建一个与mapper.xml文件中的namespace属性同名的接口；
             4.在该接口中定义好与mapper.xml中各标签的id相同的方法，该方法的返回值与resultType相同，注意别名与Java类型的对应关系；
               同时，如果接口方法中定义了多个参数，mapper.xml文件中标签的属性parameterType可以写成parameterMap或者不写，推荐这
               种情况不要写paramterType属性，SQL中获取参数时使用#{0},#{1}...或者#{param1},#{param2}...形式获取；
               如果想在mapper的SQL中使用参数形式，则要在接口方法参数前使用mybatis的注解：@Param("keyed")，其中keyed就是SQL中使用
               的参数，与接口方法的形参无关，当使用这种方式时，mybatis底层其实是将参数使用map的方式传递给mapper的。
             5.使用SQLSession对象的getMapper()方法来获取该接口的实现类对象，该方法的参数为目标接口的class对象。
        -->
        <!--<package name="me.shy.demo.mapper"/>-->

        <!-- 使用注解方式需要使用，或者使用package
             只要不是动态SQL，都可以使用注解方式实现，注解方式和xml方式可以共存。
             注解使用方式是：建立接口类，定义方法，然后在方法上使用@Select，@Insert，@Update，@Delete等
             注解，这些注解的参数均为原来mapper.xml中的sql。
             @Results注解可以实现resultMap的方式，只是写起来比较不方便，需要注意数组中的非基本类型需要再套注解。
        -->
        <!--<mapper class="me.shy.demo.mapper.*"></mapper>-->
    </mappers>
</configuration>
