<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:task="http://www.springframework.org/schema/task"
        xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.1.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
            http://www.springframework.org/schema/task
            http://www.springframework.org/schema/task/spring-task-3.1.xsd"
        default-autowire="byName"> <!-- 全局自动注入配置 -->

    <!-- 自动注入还可以分别在每个bean标签中配置，如果既没有配置全局的自动注入，也没有配置单独的自动注入，则表示禁用自动注入。
         在标签中自动注入的方式为：在bean标签中使用autowire="策略"，注入策略有：
         byName：根据bean的id与需要注入的类属性名匹配注入（不支持基本类型的成员属性）；
         byType：根据bean的类型与需要注入的类属性的类型进行匹配（不能有多个类型相同的bean）；
         constructor：根据构造方法参数的形参名匹配，底层基于byName模式；
         default：基于全局自动注入的默认方式；
         no：不自动注入。
         自动注入优先级相对较高，可能会影响ref的注入！！！
     -->


    <!-- 开启注解扫面，base-package表示要扫面哪些包，多个包使用逗号分隔，可以使用通配符
     @Component("Bean-Name")：表示为交由spring管理，相当于<bean>标签，Bean-Name默认为类名首字母小写，可以不写
    -->
    <context:component-scan base-package="me.shy.demo.*"></context:component-scan>
    <!-- proxy-target-class为true时表示使用cglib的动态代理实现，为false时表示使用JDK的动态代理技术实现，使用注解时必须开启-->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

    <!-- Ioc/DI -->

    <!-- 配置bean，此种方式为调用默认的空参数的构造函数，其中：
         id：该bean的标识，获取bean对象的时候使用
         class：指定bean的类，全限定路径
         spring管理的类（bean）默认都是单例模式的，可以使用bean标签的scope属性修改，scope属性可取值有：
         singleton：单例，默认
         propotype：多例，每次从spring获取都是新的对象；
         request：（web）每次请求都重新实例化；
         session：（web）每个session期为同一对象；
         application：（web）在application范围内对象对是单例的；
         global session：spring-webmvc-portlet对象内为单例。
     -->
    <bean id="people" class="me.shy.demo.ioc.People"></bean>

    <bean id="stu" class="me.shy.demo.ioc.Student">
        <!-- 配置bean，指定构造函数初始化，其中：
             idenx：表示参数的索引，从0开始
             name：指定属性的名称
             type：指定属性的类型
             value：指定参数的值
             ref：也是指定参数的值，但是是引用另外的一个bean
             注意：
             1.如果指定的条件匹配到多个构造方法，默认使用最后一个
             2.type中的int与java.lang.Integer不能等同
        -->
        <constructor-arg index="0" name="no" type="int" value="1"></constructor-arg>
        <constructor-arg name="name" value="Tom"></constructor-arg>
        <constructor-arg index="2" value="16"></constructor-arg>
    </bean>

    <!-- 通过实例工厂来进行bean的实例化
         由于实例工厂必须先要实例化工厂类，因此先要配置工厂类的bean，目标bean需要指定工厂bean和工厂方法
    -->
    <bean id="peopleFactory" class="me.shy.demo.ioc.PeopleFactory"/>
    <bean id="peopByInstanceFactory" factory-bean="peopleFactory" factory-method="newInstance"/>

    <!-- 通过静态工厂来进行bean的实例化
         静态工厂不需要实例化工厂类，因此，直接使用class属性指定静态工厂类，然后执行工厂方法即可
    -->
    <bean id="peopByStaticFactory" class="me.shy.demo.ioc.StaticPeopleFactory" factory-method="getInstance"/>

    <!-- 属性/依赖注入
         在实例化Bean的时候，可以通过构造方法对bean的属性进行赋值，同时也可通过seter方法来赋值，这就叫属性注入，当属性为其它Bean时，
         这个过程就叫依赖注入。
         一下示例中，当List或者数组等集合类型只有一个值时，可以直接在property标签中通过value属性注入。
    -->
    <bean id="injectDemo" class="me.shy.demo.ioc.InjectionDemoBean">
        <!-- 基本类型注入 -->
        <property name="id" value="3"></property>
        <property name="name" value="InjectionDemoBean"></property>
        <!-- 数组类型注入-->
        <property name="arrayItems">
            <array>
                <value>a</value>
                <value>b</value>
                <value>c</value>
            </array>
        </property>
        <!-- List类型注入-->
        <property name="listItems">
            <list>
                <value>aa</value>
                <value>bb</value>
                <value>cc</value>
            </list>
        </property>
        <!-- 集合类型注入-->
        <property name="setItems">
            <set>
                <value>1</value>
                <value>2</value>
                <value>3</value>
                <value>4</value>
            </set>
        </property>
        <!-- Map类型注入-->
        <property name="entries">
            <map key-type="java.lang.String">
                <entry key="10" value="xxx"></entry>
                <entry key="20" value="yyy"></entry>
                <entry key="20" value="zzz"></entry>
            </map>
        </property>
        <!-- Property类型注入-->
        <property name="props">
            <props>
                <prop key="username">shy</prop>
                <prop key="password">123456</prop>
                <prop key="host">127.0.0.1</prop>
                <prop key="port">8080</prop>
            </props>
        </property>
        <!-- 依赖Bean注入-->
        <property name="injectPerson" ref="peopByStaticFactory"></property>
    </bean>

    <!-- 加载外部属性文件 -->
    <!-- 多个属性文件时候写法：classpath:x.properties,classpath:y.properties,classpath:z.properties-->
    <!-- 使用${key}来引用外部属性的值-->
    <!-- 只要是被spring管理的类型，都能通过@Value(${key})来为该类的属性直接赋值，前提是开启注解扫面，以及key对应的值能转换为属性的类型 -->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- mybatis集成配置 -->
    <!-- 配置datasource，相当于mybatis主配置文件中的datasource -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- 配置声明式事务 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 配置事务的数据源 -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <tx:advice id="txAdvisor" transaction-manager="txManager">
        <tx:attributes>
            <!-- 声明哪些方法需要事务管理，tx:method的属性：
                 name：哪些方法需要事务管理，支持通配符；
                 read-only：默认值为false，为true表示只读事务，不需要锁表；
                 propagation：控制事务传播行为，就是说当一个具有事务控制方法被另一个有事务控制的方法调用时如何控制事务：
                    新建事务？在事务中执行？挂起事务？还是抛异常？
                    REQUIRED：默认值，如果有事务就在当前事务中执行，如果没有就新建事务；
                    SUPPORTS：如果当前有事务就在事务中执行，否则就在非事务下执行，不新建；
                    MANDATORY：必须在事务内部执行，如果当前有事务就在事务中执行，如果没事务就直接抛异常；
                    REQUIRES_NEW：必须新建一个事务，当前有事务就挂起，如果没有事务就新建；
                    NOSUPPORTED：必须在非事务状态下执行，如果当前没事务，直接执行，如果有事务，就将事务挂起；
                    NEVER：必须在非事务状态下执行，如果当前没事务，直接执行，如果有事务，就抛异常；
                    NESTED：必须在事务状态下执行，如果当前没有事务就新建事务，如果有事务，就新建一个嵌套子事务，出异常回滚到子事务初始状态；
                 isolation：事务隔离级别。在多线程或并发访问下如何保证数据是完整的。
                    脏读：一个事务读取到另一个事务中未提交的数据，这个事务中的数据还可能改变（如回滚，这些数据被称为脏数据），读取这些脏数据的过程就叫脏读；
                    不可重复读：主要针对的是某行数据或行中某些列，针对的操作是修改，两次读取在同一事务内。具体指的是事务在读取某数据后另一事务改变了这些数据，
                        原先事务再读取这些数据时就不一致，这个过程叫不可重复读。一般通过给数据加锁解决。
                    泛读：主要针对的操作是新增和删除，是在两次事务中。事务读取数据时，另一事务刚好新增或者删除了一条符合前一事务的条件的数据，前一事务查出的
                        的数据和数据库不一致。解决办法是锁表，不允许两个修改事务同时进行。
                     DEFAULT：由底层数据库决定使用什么事务隔离级别；
                     READ_UNCOMMITED：可以读取未提交数据，可能会出现脏读、不可重复读和泛读；
                     READ_COMMITED：只能读取已提交的的数据，可以预防脏读，但可能会出现不可重复读和泛读，因为没加锁；
                     REPEATABLE_READ：读取数据的数据被加锁，防止其它事务修改次数据，可以防止脏读和不可重复度，但可能出现泛读，因为只加行级锁；
                     SERILIZABLE：串行事务，对整个表加锁，一个事务执行时不允许另一个事务操作，必须排队，安全性最高，但是效率最低。
                 rollback-for：当抛出什么异常时需要回滚，指定一个异常类的全限定路径，手动抛异常时建议加上此属性；
                 no-rollback-for：指定当出现什么异常时不需要回滚，指定一个异常类的全限定路径。
             -->
            <tx:method name="addUser"/>
            <tx:method name="add*"/>
            <tx:method name="ins*" propagation="REQUIRED"/>
            <tx:method name="upd*" rollback-for="java.lang.RuntimeException"/>
            <tx:method name="del*"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 在aop中添加事务通知 -->

    <!-- 创建SqlSessionFactory-->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 绑定datasource -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 创建mybatis扫描器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定要扫面的包 -->
        <property name="basePackage" value="me.shy.demo.mybatis.mapper"></property>
        <!-- 绑定SqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
    </bean>
    <!-- 注入service对象-->
    <bean id="userService" class="me.shy.demo.mybatis.service.impl.UserServiceImpl">
        <property name="userMapper" ref="userMapper"></property>
    </bean>

    <!-- spring是无法管理servlet的，因为servlet是由tomcat等web容器管理的。

         spring封装了一个servlet监听器类，可以在web.xml中进行配置，这样在tomcat启动时就能加载spring的配置文件
         配置如下：
         <context-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
         </context-param>
         <listener>
            <listener-class>org.springframe.web.context.ContextLoaderListener</listener-class>
         </listener>

         spring与web整合后，ApplicationContext使用其子接口WebApplicationContext来管理bean。
         同时，spring还提供了一个工具类：WebApplicationContextUtils，通过该工具类的getRequiredWebApplicationContext(ServletContext)方法
         就能获取到WebApplicationContext的实例：
         WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(this.getServletContext())
         UserService userService = wac.getBean("userService", me.shy.demo.mybatis.service.impl.UserServiceImpl.class)
         把以上代码放到Servlet的init方法中，就可以使用spring管理的service层的bean对象了。
     -->

    <!-- AOP -->
    <!-- 定义切面bean -->
    <bean id="aopDemo" class="me.shy.demo.aop.AOPDemo"></bean>
    <!-- for schema-based -->
    <bean id="beforeAdviceDemo" class="me.shy.demo.aop.advice.BeforeAdviceDemo"></bean>
    <bean id="afterAdviceDemo" class="me.shy.demo.aop.advice.AfterAdviceDemo"></bean>
    <bean id="throwAdviceDemo" class="me.shy.demo.aop.advice.ThrowAdviceDemo"></bean>
    <bean id="aroundAdviceDemo" class="me.shy.demo.aop.advice.AroundAdviceDemo"></bean>
    <!-- for aspectj，注入Aspect对象 -->
    <bean id="aspectAdviceDemo" class="me.shy.demo.aop.advice.AspectAdviceDemo"></bean>
    <!-- AOP 配置 -->
    <aop:config>

        <!-- 声明式事务通知配置 -->
        <aop:advisor advice-ref="txAdvisor"
                pointcut="execution(* me.shy.demo.mybatis.service.impl.*.*(..))"></aop:advisor>

        <!-- 配置切点
             expression中的星号（*）表示通配符，可以匹配任意一级包名、类名以及方法名和返回值。匹配任意参数使用2个点号（..）
             此例中为匹配me.shy.demo.aop.AOPDemo.demo(int, String)的任意返回值的方法
        -->
        <aop:pointcut id="demoPiontcut"
                expression="execution (* me.shy.demo.aop.AOPDemo.demo(int, String))"/>
        <!-- Schema based -->
        <!-- 添加前置通知 -->
        <aop:advisor advice-ref="beforeAdviceDemo" pointcut-ref="demoPiontcut"></aop:advisor>
        <!-- 添加后置通知 -->
        <aop:advisor advice-ref="afterAdviceDemo" pointcut-ref="demoPiontcut"></aop:advisor>
        <!-- 添加异常通知 -->
        <aop:advisor advice-ref="throwAdviceDemo" pointcut-ref="demoPiontcut"></aop:advisor>
        <!-- 添加环绕通知 -->
        <aop:advisor advice-ref="aroundAdviceDemo" pointcut-ref="demoPiontcut"></aop:advisor>

        <!-- AspectJ -->
        <aop:aspect ref="aspectAdviceDemo">
            <aop:pointcut id="demoPiontcut"
                    expression="execution (* me.shy.demo.aop.AOPDemo.demo(int, String))"/>
            <!--<aop:before method="atBefored" pointcut-ref="demoPiontcut"></aop:before>-->
            <!-- 获取参数的形式，注意args(p1, p2)要和arg-names以及advice方法中的形参名保持一样-->
            <aop:before method="atBefored" arg-names="p1,p2"
                    pointcut="execution (* me.shy.demo.aop.AOPDemo.demo(int, String)) and args(p1, p2)"></aop:before>
            <!-- 此处环绕通知，要求方法必须有ProceedingJoinPoint joinPoint参数，详见AcpectAdviceDemo，否则切片不会执行 -->
            <aop:around method="atAround" pointcut-ref="demoPiontcut"></aop:around>
            <aop:after-throwing method="atThrowed" pointcut-ref="demoPiontcut"></aop:after-throwing>
            <!-- after-returning只能在切点正常执行完毕时执行，而after则都会执行，当切点正常执行完毕时，
                 如果同时配置有after-returning和after，则根据此处配置的顺序，谁在前执行谁
            -->
            <aop:after-returning method="atReturning" pointcut-ref="demoPiontcut"></aop:after-returning>
            <aop:after method="atAftered" pointcut-ref="demoPiontcut"></aop:after>
        </aop:aspect>
    </aop:config>


</beans>
